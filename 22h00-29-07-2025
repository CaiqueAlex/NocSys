22h00-29-07-2025

Projeto 90% Finalizado!

main.html

{% load static %}
<!DOCTYPE html>
<html lang="pt-br">
<head>
<meta charset="UTF-8"/>
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>NocSys</title>
<link rel="icon" type="image/png" href="{% static 'css/Nocsyslogo.png' %}">
<link rel="stylesheet" href="{% static 'css/main.css' %}" />
</head>
<body>

<!-- BARRA SUPERIOR E ANIMA√á√ÉO - Vis√≠vel em todas as telas -->
<div class="top-bar fade-slide-down">
    <div class="top-bar-left">
        <button id="menu-toggle-btn" class="menu-toggle-btn" title="Alternar menu">
            <span></span>
            <span></span>
            <span></span>
        </button>
        <div class="logo-login">NocSys</div>
        {% if user.is_authenticated %}
        <div id="logo-animation-container">
            <span id="typing-text"></span><span id="blinking-cursor"></span>
            <div id="face-emoji">
                <div class="face-eye left"></div>
                <div class="face-eye right"></div>
                <div class="face-mouth"></div>
            </div>
        </div>
        {% endif %}
    </div>
    <div class="top-bar-right">
        <button id="settings-btn" title="Configura√ß√µes">‚öôÔ∏è</button>
        <div class="clock" id="clock">--:--:--</div>
        <div class="theme-switch-wrapper">
            <label class="theme-switch" for="theme-checkbox">
                <input type="checkbox" id="theme-checkbox" />
                <div class="slider round"></div>
            </label>
        </div>
    </div>
</div>
<div id="lightbulb-anim-container">
    <div id="lightbulb">üí°</div>
</div>


{% if user.is_authenticated %}
  <!-- IN√çCIO DO CONTE√öDO DA HOME (AUTENTICADO) -->
  <div id="csrf-container" style="display: none;">{% csrf_token %}</div>
  <div class="main-container" id="main-container">
      <div class="sidebar" id="sidebar">
        <div class="logo">
          <img src="{% static 'css/Nocsyslogo.png' %}" alt="NocSys Logo" class="sidebar-logo-img">
          <span>NocSys</span>
        </div>
        <ul class="menu">
          <li><a href="#" id="menu-dashboard">üè† Dashboard</a></li>
          <li><a href="#" id="menu-chamados-abertos">üü° Chamados em Aberto</a></li>
          <li><a href="#" id="menu-chamados-finalizados">üìä Chamados Finalizados</a></li>
          <li><a href="{% url 'logout' %}">üö™ Sair</a></li>
        </ul>
      </div>
      <div class="content" id="content-area">
        <!-- O conte√∫do ser√° carregado dinamicamente aqui -->
      </div>
  </div>
  <!-- FIM DO CONTE√öDO DA HOME -->

{% else %}
  <!-- IN√çCIO DO CONTE√öDO DE LOGIN (N√ÉO AUTENTICADO) -->
  <div class="login-page-container fade-zoom-in">
    <div class="login-box fade-zoom-in" id="login-box">
      <h2 class="titlelogin">NocSys - Login</h2>
      {% if error %}
        <p class="error">{{ error }}</p>
      {% endif %}
      <form method="post" action="{% url 'main' %}" id="login-form">
        {% csrf_token %}
        <input type="text" name="username" placeholder="Usu√°rio" required autocomplete="username" />
        <input type="password" name="password" placeholder="Senha" required autocomplete="current-password" />
        <button type="submit">Entrar</button>
      </form>
    </div>
  </div>
  <!-- FIM DO CONTE√öDO DE LOGIN -->
{% endif %}

<!-- Anima√ß√£o de Inatividade -->
<div id="inactive-prompt-container">
    <div class="speech-bubble">
        <p id="inactive-prompt-text"></p>
    </div>
    <div class="prompt-character">ü§î</div>
</div>

<!-- MODAL DE CONFIRMA√á√ÉO DE EXCLUS√ÉO -->
<div id="confirm-delete-backdrop" class="modal-backdrop hidden">
    <div id="confirm-delete-box" class="modal-box">
        <div id="confirm-initial-view">
            <h2 id="confirm-delete-title"></h2>
            <div class="modal-buttons">
                <button id="confirm-delete-no-btn">N√£o, mudei de ideia!</button>
                <button id="confirm-delete-yes-btn">Sim, pode apagar!</button>
            </div>
        </div>
        <div id="confirm-success-view" class="hidden">
            <p style="font-size: 1.5rem; text-align: center;">Apagado! ‚úÖ</p>
        </div>
    </div>
</div>

<!-- MODAL DE CONFIRMA√á√ÉO DE FINALIZA√á√ÉO -->
<div id="confirm-finalize-backdrop" class="modal-backdrop hidden">
    <div id="confirm-finalize-box" class="modal-box">
        <div id="confirm-initial-view-finalize">
            <h2 id="confirm-finalize-title"></h2>
            <div class="modal-buttons">
                <button id="confirm-finalize-no-btn">Cancelar</button>
                <button id="confirm-finalize-yes-btn">Sim, finalizar chamado!</button>
            </div>
        </div>
        <div id="confirm-finalize-success-view" class="hidden">
            <p style="font-size: 1.5rem; text-align: center;">Chamado Finalizado! ‚úîÔ∏è</p>
        </div>
    </div>
</div>

<!-- MODAL DE EDI√á√ÉO DE CHAMADO -->
<div id="edit-chamado-backdrop" class="modal-backdrop hidden">
    <div id="edit-chamado-box" class="modal-box">
        <button id="edit-chamado-close-btn" class="modal-close-btn">&times;</button>
        
        <div id="edit-chamado-form-view">
            <h2>Editar Chamado #<span id="edit-chamado-codigo"></span></h2>
            <form id="edit-chamado-form" class="detalhes-suporte-container" style="margin-top: 1rem; padding: 0;">
                <div class="detalhes-grid">
                    <span>Suporte:</span>
                    <div class="suporte-field-container">
                        <select name="suporte" id="suporte-select"></select>
                        <button type="button" id="assign-to-me-btn" title="Atribuir a mim">üë§</button>
                    </div>
                    <span>Cliente:</span> <input name="cliente" readonly />
                    <span>Setor:</span> <input name="setor" />
                    <span>Resumo:</span> <input name="resumo" />
                    <span>Problema:</span> <textarea name="problema" rows="3"></textarea>
                    <span>Solu√ß√£o:</span> <textarea name="solucao" rows="3"></textarea>
                    <span>Indicador:</span>
                    <select name="indicador">
                        <option value="">Selecione...</option>
                        <option value="Requisi√ß√£o">Requisi√ß√£o</option>
                        <option value="Incidente">Incidente</option>
                    </select>
                    <span>Tempo Solu√ß√£o:</span> <input name="tempo_solucao" readonly />
                </div>
                <div class="modal-buttons">
                    <button type="submit" id="edit-chamado-save-btn">Salvar Altera√ß√µes</button>
                </div>
            </form>
        </div>
        
        <div id="edit-chamado-success-view" class="hidden">
            <p style="font-size: 1.5rem; text-align: center;">Altera√ß√µes salvas! ‚úÖ</p>
        </div>
    </div>
</div>

<!-- MODAL DE CONFIGURA√á√ïES -->
<div id="settings-backdrop" class="modal-backdrop hidden">
    <div id="settings-box" class="modal-box">
        <div class="settings-container fade-in">
            <div class="settings-sidebar">
                <h3>Configura√ß√µes</h3>
                <ul>
                    <li><a href="#" class="settings-nav-link active" data-target="settings-view-user">üë§ Usu√°rio</a></li>
                    <li><a href="#" class="settings-nav-link" data-target="settings-view-export">üì§ Exportar XML</a></li>
                </ul>
            </div>
            <div class="settings-content">
                <button id="settings-close-btn" class="modal-close-btn">&times;</button>
                
                <!-- View do Usu√°rio -->
                <div id="settings-view-user" class="settings-view">
                    <h2>Detalhes do Usu√°rio</h2>
                    <div class="user-details-grid">
                        <span>Nome Completo:</span> <strong id="settings-user-name">Carregando...</strong>
                        <span>Email:</span> <strong id="settings-user-email">Carregando...</strong>
                        <span>Usu√°rio:</span> <strong id="settings-user-username">Carregando...</strong>
                        <hr>
                        <span>Membro desde:</span> <strong id="settings-user-joined">Carregando...</strong>
                        <span>Chamados Finalizados:</span> <strong id="settings-finalizados-count">Carregando...</strong>
                    </div>
                </div>

                <!-- View de Exporta√ß√£o -->
                <div id="settings-view-export" class="settings-view hidden">
                    <h2>Exportar Dados</h2>
                    <p>Funcionalidade em desenvolvimento (WIP). Em breve voc√™ poder√° exportar seus dados em formato XML.</p>
                </div>
            </div>
        </div>
    </div>
</div>


<!-- SCRIPTS GERAIS -->
<script src="{% static 'js/dashboard.js' %}"></script>
<script src="{% static 'js/abertos.js' %}"></script>
<script src="{% static 'js/chamados_finalizados.js' %}"></script>
<script src="{% static 'js/config.js' %}"></script>

<script>
  // --- FUN√á√ÉO PARA PEGAR O CSRF TOKEN ---
  function getCsrfToken() {
    // Busca o token no container para usu√°rios logados, ou no form de login para n√£o logados.
    const csrfInput = document.querySelector('#csrf-container [name="csrfmiddlewaretoken"]') || document.querySelector('#login-form [name="csrfmiddlewaretoken"]');
    return csrfInput ? csrfInput.value : '';
  }

  // --- L√ìGICA DO MODAL DE EDI√á√ÉO (CENTRALIZADA) ---
  async function showEditModal(codigo) {
    const backdrop = document.getElementById('edit-chamado-backdrop');
    const formView = document.getElementById('edit-chamado-form-view');
    const successView = document.getElementById('edit-chamado-success-view');
    const form = document.getElementById('edit-chamado-form');
    const closeBtn = document.getElementById('edit-chamado-close-btn');
    const suporteSelect = document.getElementById('suporte-select');
    const assignBtn = document.getElementById('assign-to-me-btn');

    formView.classList.remove('hidden', 'content-hiding');
    successView.classList.add('hidden');
    backdrop.classList.remove('hidden');
    document.getElementById('edit-chamado-codigo').textContent = codigo;
    form.reset();

    const saveBtn = document.getElementById('edit-chamado-save-btn');
    saveBtn.disabled = true;
    saveBtn.textContent = 'Carregando...';

    const isFinalizadoElement = document.getElementById(`chamado-${codigo}`);
    const isFinalizado = isFinalizadoElement && isFinalizadoElement.closest('#content-area').querySelector('h1')?.textContent.includes('Finalizados');
    
    try {
        const usersRes = await fetch('/api/users/');
        if (!usersRes.ok) throw new Error('Falha ao carregar lista de usu√°rios.');
        const users = await usersRes.json();
        
        suporteSelect.innerHTML = '<option value="">Selecione...</option>';
        users.forEach(user => {
            const option = document.createElement('option');
            option.value = user;
            option.textContent = user;
            suporteSelect.appendChild(option);
        });

        const res = await fetch(`/api/whatsapp-slots/?finalizado=${isFinalizado ? 1 : 0}`);
        if (!res.ok) throw new Error('Falha ao carregar dados do chamado.');
        
        const chamados = await res.json();
        const ultimoSlot = chamados
            .filter(s => s.codigo_chamado === codigo)
            .sort((a, b) => new Date(b.criado_em) - new Date(a.criado_em))[0];

        if (ultimoSlot) {
            form.elements.suporte.value = ultimoSlot.suporte || '';
            form.elements.cliente.value = ultimoSlot.cliente || '';
            form.elements.setor.value = ultimoSlot.setor || '';
            form.elements.resumo.value = ultimoSlot.resumo || '';
            form.elements.problema.value = ultimoSlot.problema || '';
            form.elements.solucao.value = ultimoSlot.solucao || '';
            form.elements.indicador.value = ultimoSlot.indicador || '';
            form.elements.tempo_solucao.value = ultimoSlot.tempo_solucao || (isFinalizado ? 'N/A' : 'Ainda em aberto');
        }
        saveBtn.disabled = false;
        saveBtn.textContent = 'Salvar Altera√ß√µes';

    } catch (error) {
        console.error("Erro ao popular formul√°rio de edi√ß√£o:", error);
        alert(error.message);
        backdrop.classList.add('hidden');
        return;
    }

    const hide = () => { backdrop.classList.add('hidden'); };
    
    const assignToMe = async () => {
        try {
            const res = await fetch('/api/user/stats/');
            if (!res.ok) throw new Error('Falha ao obter dados do usu√°rio logado.');
            const userData = await res.json();
            suporteSelect.value = userData.username;
        } catch(error) { alert(error.message); }
    };

    const handleSave = async (event) => {
        event.preventDefault();
        const formData = new FormData(form);
        const data = Object.fromEntries(formData.entries());

        saveBtn.disabled = true;
        saveBtn.textContent = 'Salvando...';

        try {
            const response = await fetch(`/api/chamado/atualizar/${codigo}/`, {
                method: 'PATCH',
                headers: { 'Content-Type': 'application/json', 'X-CSRFToken': getCsrfToken() },
                body: JSON.stringify(data),
            });
            if (!response.ok) throw new Error('Falha ao salvar as altera√ß√µes.');

            formView.classList.add('content-hiding');
            setTimeout(() => {
                formView.classList.add('hidden');
                successView.classList.remove('hidden');
                setTimeout(() => {
                    hide();
                    if (isFinalizado) { loadChamadosFinalizados(); } 
                    else { loadAbertos(); }
                }, 1200);
            }, 300);

        } catch (error) {
            console.error('Erro ao salvar:', error);
            alert(error.message);
            saveBtn.disabled = false;
            saveBtn.textContent = 'Salvar Altera√ß√µes';
        }
    };
    
    const cleanupListeners = () => {
        form.removeEventListener('submit', handleSave);
        closeBtn.removeEventListener('click', handleClose);
        assignBtn.removeEventListener('click', assignToMe);
    };
    const handleClose = () => { hide(); cleanupListeners(); };
    
    form.addEventListener('submit', handleSave);
    closeBtn.addEventListener('click', handleClose);
    assignBtn.addEventListener('click', assignToMe);
  }

  // --- L√ìGICA DOS MODAIS DE CONFIRMA√á√ÉO ---

  // Fun√ß√£o gen√©rica para anima√ß√£o de escrita
  function typeWriter(element, text, speed) {
      return new Promise((resolve) => {
          let i = 0;
          element.innerHTML = '';
          const cursor = '<span class="cursor"></span>';
          element.innerHTML = cursor;
          function type() {
              if (i < text.length) {
                  element.innerHTML = text.substring(0, i + 1) + cursor;
                  i++;
                  setTimeout(type, speed);
              } else {
                  element.innerHTML = text;
                  resolve();
              }
          }
          type();
      });
  }

  // Modal de Exclus√£o
  const deletePhrases = [
      "Tem certeza? üòï Apagar o chamado #{codigo} √© um caminho sem volta... tipo meia perdida na m√°quina de lavar.",
      "Certeza mesmo? üßê O chamado #{codigo} ser√° enviado para o v√°cuo c√≥smico, de onde nada retorna.",
      "√öltima chance! üò¨ Clicar em 'Sim' vai deletar o chamado #{codigo} mais r√°pido que um piscar de olhos.",
      "Pense bem... O hist√≥rico do chamado #{codigo} est√° prestes a virar poeira digital. Continuar?",
      "Alerta! üö® O chamado #{codigo} ser√° permanentemente exclu√≠do. N√£o temos um 'desfazer' para isso."
  ];
  function showDeleteConfirmModal(codigo) {
      const backdrop = document.getElementById('confirm-delete-backdrop');
      const title = document.getElementById('confirm-delete-title');
      const noBtn = document.getElementById('confirm-delete-no-btn');
      const yesBtn = document.getElementById('confirm-delete-yes-btn');
      
      backdrop.querySelector('#confirm-initial-view').classList.remove('hidden', 'content-hiding');
      backdrop.querySelector('#confirm-success-view').classList.add('hidden');
      backdrop.classList.remove('hidden');

      const message = deletePhrases[Math.floor(Math.random() * deletePhrases.length)].replace('{codigo}', codigo);
      typeWriter(title, message, 25);

      return new Promise(resolve => {
          const handleYesClick = () => { resolve(true); cleanup(); };
          const handleNoClick = () => { backdrop.classList.add('hidden'); resolve(false); cleanup(); };
          const cleanup = () => {
              yesBtn.removeEventListener('click', handleYesClick);
              noBtn.removeEventListener('click', handleNoClick);
          };
          yesBtn.addEventListener('click', handleYesClick, { once: true });
          noBtn.addEventListener('click', handleNoClick, { once: true });
      });
  }
  async function apagarChamado(codigo) {
      if (!(await showDeleteConfirmModal(codigo))) return;

      const backdrop = document.getElementById('confirm-delete-backdrop');
      const initialView = document.getElementById('confirm-initial-view');
      const successView = document.getElementById('confirm-success-view');
      
      initialView.classList.add('content-hiding');
      setTimeout(() => {
          initialView.classList.add('hidden');
          successView.classList.remove('hidden');
      }, 300);

      try {
          const response = await fetch(`/api/chamado/apagar/${codigo}/`, {
              method: 'DELETE',
              headers: { 'X-CSRFToken': getCsrfToken() }
          });
          if (!response.ok) {
              const errorData = await response.json();
              throw new Error(errorData.detail || 'Falha ao apagar o chamado.');
          }
          await new Promise(res => setTimeout(res, 1200));
          backdrop.classList.add('hidden');
          const chamadoElement = document.getElementById(`chamado-${codigo}`);
          if (chamadoElement) {
              chamadoElement.style.transition = 'opacity 0.5s ease';
              chamadoElement.style.opacity = '0';
              setTimeout(() => chamadoElement.remove(), 500);
          }
      } catch (error) {
          backdrop.classList.add('hidden');
          alert(`Erro: ${error.message}`);
          console.error('Erro ao apagar chamado:', error);
      }
  }

  // Modal de Finaliza√ß√£o
  const finalizePhrases = [
    "Pronto para encerrar o chamado #{codigo}? üöÄ O cliente agradece!",
    "Finalizar o chamado #{codigo}? Miss√£o (quase) cumprida. S√≥ falta seu clique.",
    "Bora dar baixa no chamado #{codigo}? ‚úîÔ∏è Mais um pra conta!",
  ];
  function showFinalizeConfirmModal(codigo) {
      const backdrop = document.getElementById('confirm-finalize-backdrop');
      const title = document.getElementById('confirm-finalize-title');
      const noBtn = document.getElementById('confirm-finalize-no-btn');
      const yesBtn = document.getElementById('confirm-finalize-yes-btn');
      
      backdrop.querySelector('#confirm-initial-view-finalize').classList.remove('hidden', 'content-hiding');
      backdrop.querySelector('#confirm-finalize-success-view').classList.add('hidden');
      backdrop.classList.remove('hidden');

      const message = finalizePhrases[Math.floor(Math.random() * finalizePhrases.length)].replace('{codigo}', codigo);
      typeWriter(title, message, 25);

      return new Promise(resolve => {
          const handleYesClick = () => { resolve(true); cleanup(); };
          const handleNoClick = () => { backdrop.classList.add('hidden'); resolve(false); cleanup(); };
          const cleanup = () => {
              yesBtn.removeEventListener('click', handleYesClick);
              noBtn.removeEventListener('click', handleNoClick);
          };
          yesBtn.addEventListener('click', handleYesClick, { once: true });
          noBtn.addEventListener('click', handleNoClick, { once: true });
      });
  }
  async function finalizarChamado(codigo) {
      if (!(await showFinalizeConfirmModal(codigo))) return;

      const backdrop = document.getElementById('confirm-finalize-backdrop');
      const initialView = document.getElementById('confirm-initial-view-finalize');
      const successView = document.getElementById('confirm-finalize-success-view');

      initialView.classList.add('content-hiding');
      setTimeout(() => {
          initialView.classList.add('hidden');
          successView.classList.remove('hidden');
      }, 300);
      
      try {
          const response = await fetch(`/api/chamado/finalizar/${codigo}/`, {
              method: 'POST',
              headers: { 'Content-Type': 'application/json', 'X-CSRFToken': getCsrfToken() },
              body: JSON.stringify({})
          });
          if (!response.ok) {
              const errorData = await response.json();
              throw new Error(errorData.detail || 'Falha ao finalizar o chamado.');
          }
          await new Promise(res => setTimeout(res, 1200));
          backdrop.classList.add('hidden');
          const chamadoElement = document.getElementById(`chamado-${codigo}`);
          if (chamadoElement) {
              chamadoElement.style.transition = 'opacity 0.5s ease, transform 0.5s ease, height 0.5s ease, margin 0.5s ease, padding 0.5s ease';
              chamadoElement.style.opacity = '0';
              chamadoElement.style.transform = 'scale(0.95)';
              chamadoElement.style.height = '0';
              chamadoElement.style.margin = '0';
              chamadoElement.style.padding = '0';
              setTimeout(() => chamadoElement.remove(), 500);
          }
      } catch (error) {
          backdrop.classList.add('hidden');
          alert(`Erro: ${error.message}`);
          console.error('Erro ao finalizar chamado:', error);
      }
  }


  // Scripts da Home Autenticada
  if (document.getElementById("menu-chamados-abertos")) {
    document.getElementById("menu-dashboard").addEventListener("click", e => { e.preventDefault(); loadDashboard(); });
    document.getElementById("menu-chamados-abertos").addEventListener("click", e => { e.preventDefault(); loadAbertos(); });
    document.getElementById("menu-chamados-finalizados").addEventListener("click", e => { e.preventDefault(); loadChamadosFinalizados(); });
  }

  // Script do Login
  const form = document.getElementById('login-form');
  if (form) {
    form.addEventListener('submit', function (e) {
      e.preventDefault(); document.body.classList.add('fade-zoom-out'); setTimeout(() => form.submit(), 400);
    });
  }

  // Scripts da Barra Superior e Sidebar
  document.addEventListener('DOMContentLoaded', () => {
    if (document.querySelector('.main-container')) { loadDashboard(); }
    const clockElement = document.getElementById('clock');
    function updateClock() {
      if (clockElement) {
        const now = new Date();
        const hours = String(now.getHours()).padStart(2, '0');
        const minutes = String(now.getMinutes()).padStart(2, '0');
        const seconds = String(now.getSeconds()).padStart(2, '0');
        clockElement.textContent = `${hours}:${minutes}:${seconds}`;
      }
    }
    setInterval(updateClock, 1000); updateClock();
    const themeToggle = document.getElementById('theme-checkbox');
    const body = document.body;
    const lightbulb = document.getElementById('lightbulb');
    const currentTheme = localStorage.getItem('theme');
    function applyTheme(theme) {
        if (theme === 'light') { body.classList.add('light-mode'); if(themeToggle) themeToggle.checked = true; } 
        else { body.classList.remove('light-mode'); if(themeToggle) themeToggle.checked = false; }
    }
    if (currentTheme) { applyTheme(currentTheme); }
    function animateBulb(mode) {
        if (!lightbulb) return;
        lightbulb.className = ''; void lightbulb.offsetWidth;
        if (mode === 'light') { lightbulb.classList.add('animate-on'); } 
        else { lightbulb.classList.add('animate-off'); }
    }
    if (themeToggle) {
        themeToggle.addEventListener('change', () => {
            let newTheme = themeToggle.checked ? 'light' : 'dark';
            animateBulb(newTheme);
            setTimeout(() => { applyTheme(newTheme); localStorage.setItem('theme', newTheme); }, 1000);
        });
    }
    const menuToggleBtn = document.getElementById('menu-toggle-btn');
    const sidebar = document.getElementById('sidebar');
    const mainContainer = document.getElementById('main-container');
    if (menuToggleBtn && sidebar && mainContainer) {
        let hoverTimeout;
        menuToggleBtn.addEventListener('click', () => { sidebar.classList.toggle('sidebar-pinned'); mainContainer.classList.toggle('content-shifted'); });
        const showSidebarOnHover = () => { clearTimeout(hoverTimeout); if (!sidebar.classList.contains('sidebar-pinned')) { sidebar.classList.add('sidebar-visible'); mainContainer.classList.add('content-shifted'); } };
        const hideSidebarOnLeave = () => { hoverTimeout = setTimeout(() => { if (!sidebar.classList.contains('sidebar-pinned')) { sidebar.classList.remove('sidebar-visible'); mainContainer.classList.remove('content-shifted'); } }, 300); };
        menuToggleBtn.addEventListener('mouseenter', showSidebarOnHover);
        sidebar.addEventListener('mouseenter', showSidebarOnHover);
        menuToggleBtn.addEventListener('mouseleave', hideSidebarOnLeave);
        sidebar.addEventListener('mouseleave', hideSidebarOnLeave);
    }
    const animationContainer = document.getElementById('logo-animation-container');
    if (animationContainer) {
        const typingText = document.getElementById('typing-text');
        const face = document.getElementById('face-emoji');
        const fullText = "Network Operation Center System"; 
        let isAnimating = false;
        const runAnimationCycle = async () => {
            if (isAnimating) return;
            isAnimating = true;
            animationContainer.style.width = 'auto'; typingText.textContent = '';
            for (let i = 0; i < fullText.length; i++) { typingText.textContent += fullText[i]; await new Promise(res => setTimeout(res, 80)); }
            face.classList.add('animate-face');
            await new Promise(res => setTimeout(res, 5000));
            face.classList.remove('animate-face');
            for (let i = fullText.length; i >= 0; i--) { face.style.transform = `translateX(${(1 - i / fullText.length) * 100}%)`; typingText.textContent = fullText.substring(0, i); await new Promise(res => setTimeout(res, 40)); }
            animationContainer.style.width = '0'; isAnimating = false;
        };
        setInterval(runAnimationCycle, 60000);
    }
    const promptContainer = document.getElementById('inactive-prompt-container');
    if (promptContainer) {
        const promptText = document.getElementById('inactive-prompt-text');
        const phrases = ["Ainda est√° a√≠?", "O que acha de se mexer um pouco?", "Um caf√© cairia bem agora...", "Ei, psiu!", "Tudo certo por aqui?", "Sil√™ncio total... ser√° que dormiu no teclado?", "O tempo parou ou foi voc√™ que congelou?", "Se fosse um jogo, j√° tinha aparecido a tela de pausa üò¥", "A cadeira est√° com saudade de voc√™.", "A energia caiu a√≠ ou s√≥ a motiva√ß√£o?", "Se ainda estiver por a√≠, pisque duas vezes!", "A tela sente sua falta. Volta logo!", "Essa pausa virou medita√ß√£o?", "A produtividade foi tomar √°gua, voc√™ vai junto?", "Vamos fingir que isso foi uma pausa estrat√©gica.", "Tem algu√©m a√≠ ou s√≥ os ecos da √∫ltima a√ß√£o?", "Esse sil√™ncio me lembra quando o Wi-Fi cai...", "Aten√ß√£o: suspeita de modo fantasma ativado.", "O universo est√° esperando sua pr√≥xima jogada.", "Enquanto voc√™ pensa, os pixels tiram uma soneca.", "Parece que o teclado entrou em f√©rias coletivas.", "Se tivesse um pr√™mio por ficar parado... voc√™ ganhava!", "Ei, voltou? Ah n√£o, foi s√≥ o vento.", "Nem uma piscadinha? Estou come√ßando a me preocupar.", "A pausa t√° t√£o longa que virou feriado.", "O sistema detectou... saudades suas.", "Quase chamei os bombeiros, achei que voc√™ tinha evaporado.", "Nem parece que algu√©m estava digitando aqui h√° pouco.", "A atividade sumiu mais r√°pido que as segundas-feiras felizes.", "N√£o quero ser chato, mas... voc√™ esqueceu de mim?", "Ser√° que eu falo sozinho ou voc√™ est√° s√≥ disfar√ßando?", "Se for suspense, j√° ganhou minha aten√ß√£o!", "Modo ‚Äòest√°tua‚Äô ativado com sucesso.", "S√≥ confirmando: voc√™ virou poeira c√≥smica ou foi s√≥ um cochilo?", "T√° tudo bem a√≠? At√© a barra de progresso se desesperou!", "Al√¥? Terra chamando...", "O sistema est√° ocioso. Hora de um alongamento!", "At√© os servidores est√£o mais ativos que voc√™.", "Isso √© uma pausa para o caf√© ou uma hiberna√ß√£o?", "Detectei um v√°cuo de atividade no seu setor."];
        let inactivityTimer;
        let promptIsVisible = false;
        const INACTIVITY_TIME = 120000; 
        const showPrompt = () => {
            if (promptIsVisible) return;
            promptIsVisible = true;
            promptText.textContent = phrases[Math.floor(Math.random() * phrases.length)];
            promptContainer.classList.remove('hiding');
            promptContainer.classList.add('visible');
        };
        const hidePrompt = () => {
            if (!promptIsVisible) return;
            promptIsVisible = false;
            promptContainer.classList.add('hiding');
            setTimeout(() => { promptContainer.classList.remove('visible'); }, 500); 
        };
        const resetInactivityTimer = () => {
            hidePrompt();
            clearTimeout(inactivityTimer);
            inactivityTimer = setTimeout(showPrompt, INACTIVITY_TIME);
        };
        window.addEventListener('mousedown', resetInactivityTimer);
        resetInactivityTimer();
    }
    const settingsBtn = document.getElementById('settings-btn');
    if(settingsBtn) { settingsBtn.addEventListener('click', showSettingsModal); }
  });
</script>

</body>
</html>

main.css

/* Reset, Vari√°veis de Tema e Estilo Base */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

:root {
    /* Tema Escuro (Padr√£o) */
    --bg-primary: #111827;
    --bg-secondary: #1e293b;
    --bg-tertiary: #1f2937;
    --bg-quaternary: #374151;
    --text-primary: #e5e7eb;
    --text-secondary: #9ca3af;
    --text-tertiary: #d1d5db;
    --accent-primary: #38bdf8;
    --accent-secondary: #2563eb;
    --accent-tertiary: #facc15;
    --accent-hover: #1e40af;
    --border-color: #2563eb;
    --shadow-color: rgba(0, 0, 0, 0.5);
    --error-color: #f87171;
    --danger-color: #ef4444;
    --danger-hover: #b91c1c;
    --success-color: #22c55e;
    --success-hover: #16a34a;
    --sidebar-width: 220px;
    --card-yellow: #4a4a28;
    --card-green: #284a37;
    --card-gray: #374151;
    --card-red: #4a282d;
    --card-blue: #28374a;
}

body.light-mode {
    /* Tema Claro */
    --bg-primary: #f9fafb;
    --bg-secondary: #e5e7eb;
    --bg-tertiary: #f3f4f6;
    --bg-quaternary: #d1d5db;
    --text-primary: #1f2937;
    --text-secondary: #4b5563;
    --text-tertiary: #374151;
    --accent-primary: #0ea5e9;
    --accent-secondary: #2563eb;
    --accent-tertiary: #f59e0b;
    --accent-hover: #1d4ed8;
    --border-color: #3b82f6;
    --shadow-color: rgba(0, 0, 0, 0.1);
    --error-color: #ef4444;
    --danger-color: #dc2626;
    --danger-hover: #991b1b;
    --success-color: #16a34a;
    --success-hover: #15803d;
    --card-yellow: #fef9c3;
    --card-green: #dcfce7;
    --card-gray: #f3f4f6;
    --card-red: #fee2e2;
    --card-blue: #dbeafe;
}

body {
    font-family: 'Segoe UI', sans-serif;
    background-color: var(--bg-secondary);
    color: var(--text-primary);
    height: 100vh;
    overflow-x: hidden;
    transition: background-color 0.5s ease, color 0.5s ease;
}

/* =================================== */
/* DASHBOARD                           */
/* =================================== */
.dashboard-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
    gap: 20px;
    margin-top: 20px;
}
.dashboard-card {
    background-color: var(--bg-primary);
    padding: 25px;
    border-radius: 12px;
    box-shadow: 0 4px 15px var(--shadow-color);
    cursor: pointer;
    transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
    text-align: center;
}
.dashboard-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 8px 25px var(--shadow-color);
}
.card-number {
    font-size: 3rem;
    font-weight: 700;
    color: var(--text-primary);
}
.card-title {
    font-size: 1rem;
    font-weight: 500;
    color: var(--text-secondary);
    margin-top: 8px;
}
.card-wip {
    font-size: 0.75rem;
    font-weight: bold;
    color: var(--danger-color);
    margin-top: 4px;
}
.card-yellow { background-color: var(--card-yellow); }
.card-green { background-color: var(--card-green); }
.card-gray { background-color: var(--card-gray); }
.card-red { background-color: var(--card-red); }
.card-blue { background-color: var(--card-blue); }


/* =================================== */
/* MODAIS (GERAL, DELETE, EDIT, CONFIG)*/
/* =================================== */
.modal-backdrop {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(17, 24, 39, 0.6);
    backdrop-filter: blur(5px);
    z-index: 10000;
    display: flex;
    justify-content: center;
    align-items: center;
    opacity: 0;
    transition: opacity 0.3s ease-in-out;
    pointer-events: none;
}
.modal-backdrop:not(.hidden) {
    opacity: 1;
    pointer-events: auto;
}
.modal-box {
    background: var(--bg-primary);
    border-radius: 16px;
    box-shadow: 0 10px 30px var(--shadow-color);
    width: 90%;
    text-align: center;
    transform: scale(0.7);
    transition: transform 0.3s cubic-bezier(0.34, 1.56, 0.64, 1), opacity 0.3s ease-in-out;
    overflow: hidden;
    position: relative;
}
.modal-backdrop.hidden .modal-box {
    opacity: 0;
    transform: scale(0.7);
}
.modal-backdrop:not(.hidden) .modal-box {
    transform: scale(1);
    opacity: 1;
}
.modal-box h2 {
    font-size: 1.5rem;
    color: var(--text-primary);
    margin-bottom: 1rem;
}
.modal-close-btn {
    position: absolute;
    top: 10px;
    right: 15px;
    background: none;
    border: none;
    font-size: 2.5rem;
    color: var(--text-secondary);
    cursor: pointer;
    line-height: 1;
    padding: 0;
    transition: color 0.2s, transform 0.2s;
    z-index: 10;
}
.modal-close-btn:hover {
    color: var(--text-primary);
    transform: scale(1.1);
}
.modal-buttons {
    display: flex;
    justify-content: center;
    gap: 1rem;
    margin-top: 1.5rem;
}
.modal-buttons button {
    padding: 10px 20px;
    border: none;
    border-radius: 8px;
    font-size: 1rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s ease;
}
.modal-buttons button:disabled {
    background-color: var(--bg-quaternary);
    color: var(--text-secondary);
    cursor: not-allowed;
    transform: none;
}
/* Anima√ß√£o de troca de conte√∫do do modal */
.modal-box .content-hiding {
    opacity: 0;
    transform: scale(0.95);
}
.modal-box .hidden {
    display: none !important;
}

/* Modal de Exclus√£o e Finaliza√ß√£o */
#confirm-delete-box, #confirm-finalize-box { max-width: 500px; padding: 2rem; }
#confirm-delete-box h2, #confirm-finalize-box h2 { min-height: 5rem; }
#confirm-delete-title span.cursor, #confirm-finalize-title span.cursor { display: inline-block; background-color: var(--accent-primary); width: 3px; height: 1.4rem; margin-left: 2px; vertical-align: middle; animation: blink 1s infinite; }
#confirm-delete-no-btn, #confirm-finalize-no-btn { background-color: var(--bg-quaternary); color: var(--text-primary); }
#confirm-delete-no-btn:hover, #confirm-finalize-no-btn:hover { background-color: var(--text-secondary); }
#confirm-delete-yes-btn { background-color: var(--danger-color); color: white; }
#confirm-delete-yes-btn:hover { background-color: var(--danger-hover); transform: translateY(-2px); }
#confirm-finalize-yes-btn { background-color: var(--success-color); color: white; }
#confirm-finalize-yes-btn:hover { background-color: var(--success-hover); transform: translateY(-2px); }


/* Modal de Edi√ß√£o */
#edit-chamado-box { max-width: 550px; padding: 2rem; }
#edit-chamado-save-btn { background-color: var(--accent-secondary); color: white; }
#edit-chamado-save-btn:hover:not(:disabled) { background-color: var(--accent-hover); transform: translateY(-2px); }

/* Modal de Configura√ß√µes */
#settings-box { max-width: 800px; padding: 0; text-align: left; }
.settings-container { display: flex; min-height: 400px; }
.settings-container.fade-in { animation: fadeIn 0.4s 0.2s ease-in-out forwards; opacity: 0; }
.settings-sidebar { width: 200px; background-color: var(--bg-secondary); padding: 1.5rem; border-right: 1px solid var(--bg-tertiary); }
.settings-sidebar h3 { font-size: 1.2rem; color: var(--accent-tertiary); margin-bottom: 1.5rem; }
.settings-sidebar ul { list-style: none; padding: 0; }
.settings-sidebar a { text-decoration: none; color: var(--text-tertiary); display: block; padding: 0.75rem; border-radius: 6px; transition: all 0.2s ease; }
.settings-sidebar a:hover { background-color: var(--bg-quaternary); color: var(--text-primary); }
.settings-sidebar a.active { background-color: var(--accent-secondary); color: white; font-weight: 600; }
.settings-content { flex: 1; padding: 2rem; position: relative; }
.settings-view h2 { margin-bottom: 2rem; text-align: left; color: var(--text-primary)}
.user-details-grid { display: grid; grid-template-columns: max-content 1fr; gap: 1rem 1.5rem; align-items: center; }
.user-details-grid span:nth-child(odd) { font-weight: 600; color: var(--text-secondary); text-align: right; }
.user-details-grid strong { color: var(--text-primary); }
.user-details-grid hr { grid-column: span 2; border: 0; border-top: 1px solid var(--bg-tertiary); margin: 1rem 0; }

/* =================================== */
/* NOVA ANIMA√á√ÉO DE INATIVIDADE        */
/* =================================== */
#inactive-prompt-container {
    position: fixed;
    bottom: 20px;
    right: 20px;
    z-index: 9999;
    display: flex;
    align-items: flex-end;
    gap: 10px;
    opacity: 0;
    transform: translateX(50px);
    transition: opacity 0.5s ease, transform 0.5s ease;
    pointer-events: none;
}
#inactive-prompt-container.visible {
    opacity: 1;
    transform: translateX(0);
    pointer-events: auto;
}
#inactive-prompt-container.hiding {
    opacity: 0;
    transform: translateX(50px);
}
.prompt-character {
    font-size: 5rem;
    transform: scaleX(-1);
}
.speech-bubble {
    background-color: var(--bg-tertiary);
    color: var(--text-primary);
    padding: 15px 20px;
    border-radius: 15px;
    max-width: 200px;
    box-shadow: 0 4px 12px var(--shadow-color);
    position: relative;
    margin-bottom: 20px;
    font-weight: 500;
}
.speech-bubble::after {
    content: '';
    position: absolute;
    bottom: 0;
    right: -15px;
    width: 0;
    height: 0;
    border: 20px solid transparent;
    border-left-color: var(--bg-tertiary);
    border-bottom: 0;
    margin-top: -10px;
    margin-right: -20px;
}

/* =================================== */
/* COMPONENTES GLOBAIS (BARRA SUPERIOR)*/
/* =================================== */
.top-bar { position: fixed; top: 0; left: 0; right: 0; height: 3.5rem; background-color: var(--bg-primary); color: var(--accent-primary); display: flex; justify-content: space-between; align-items: center; padding: 0 1.5rem; z-index: 100; box-shadow: 0 2px 8px var(--shadow-color); }
.top-bar-left { display: flex; align-items: center; gap: 1rem; overflow: hidden; flex-shrink: 1; }
.menu-toggle-btn, #settings-btn { background: none; border: none; cursor: pointer; padding: 8px; color: var(--accent-primary); transition: color 0.2s, transform 0.2s; }
.menu-toggle-btn span { display: block; width: 22px; height: 3px; background-color: var(--accent-primary); border-radius: 2px; transition: transform 0.3s ease, opacity 0.3s ease; }
#settings-btn { font-size: 1.5rem; display: flex; align-items: center; }
#settings-btn:hover { transform: scale(1.1) rotate(15deg); }
.logo-login { font-weight: bold; font-size: 1.5rem; white-space: nowrap; }
#logo-animation-container { display: flex; align-items: center; font-size: 1.5rem; font-weight: bold; white-space: nowrap; width: 0; color: var(--text-primary); vertical-align: middle; }
#typing-text { display: inline-block; }
#blinking-cursor { display: inline-block; background-color: var(--accent-primary); width: 2px; height: 1.4rem; margin-left: 1px; vertical-align: middle; animation: blink 1s infinite; }
@keyframes blink { from, to { opacity: 1; } 50% { opacity: 0; } }
#face-emoji { display: none; align-items: center; justify-content: center; position: relative; width: 28px; height: 28px; background-color: #facc15; border-radius: 50%; margin-left: 8px; opacity: 0; }
#face-emoji.animate-face { display: inline-flex; animation: peek-look-wink-corrected 5s ease-in-out forwards; }
.face-eye { position: absolute; width: 4px; height: 5px; background-color: var(--bg-primary); border-radius: 50%; top: 9px; }
.face-eye.left { left: 7px; }
.face-eye.right { right: 7px; }
.face-mouth { position: absolute; width: 10px; height: 5px; border-bottom: 2px solid var(--bg-primary); border-radius: 0 0 5px 5px; bottom: 6px; }
@keyframes peek-look-wink-corrected { 0% { opacity: 0; transform: translateY(20px); } 20% { opacity: 1; transform: translateY(0); } 30% {} 40% { transform: translateX(-3px); } 50% {} 60% { transform: translateX(3px); } 70% { transform: translateX(0); } 75% { transform: scaleY(0.1) translateX(0); } 80% { transform: scaleY(1) translateX(0); } 90% { opacity: 1; } 100% { opacity: 0; } }
#face-emoji.animate-face .face-eye { animation: eye-movement-corrected 5s ease-in-out forwards; }
@keyframes eye-movement-corrected { 0%, 30%, 70%, 100% { transform: translateY(0); } 40%, 60% { transform: translateY(4px); } }
.top-bar-right { display: flex; align-items: center; gap: 1rem; }
.clock { font-family: monospace; font-size: 1rem; white-space: nowrap; color: var(--text-primary); }
.theme-switch-wrapper { display: flex; align-items: center; }
.theme-switch { position: relative; display: inline-block; width: 50px; height: 26px; }
.theme-switch input { opacity: 0; width: 0; height: 0; }
.slider { position: absolute; cursor: pointer; top: 0; left: 0; right: 0; bottom: 0; background-color: #374151; transition: .4s; }
.slider:before { position: absolute; content: ""; height: 18px; width: 18px; left: 4px; bottom: 4px; background-color: white; transition: .4s; }
input:checked+.slider { background-color: var(--accent-secondary); }
input:checked+.slider:before { transform: translateX(24px); }
.slider.round { border-radius: 34px; }
.slider.round:before { border-radius: 50%; }
#lightbulb-anim-container { position: fixed; top: 3.5rem; left: 50%; transform: translateX(-50%); width: 60px; height: 300px; z-index: 99; pointer-events: none; }
#lightbulb { font-size: 40px; position: absolute; top: -100px; left: 0; opacity: 0; }
#lightbulb.animate-on { animation: dropAndGlow 2s ease-in-out forwards; }
#lightbulb.animate-off { animation: dropAndFade 2s ease-in-out forwards; }
@keyframes dropAndGlow { 0% { top: -100px; opacity: 0; } 40% { top: 100px; opacity: 1; text-shadow: none; } 50% { top: 100px; opacity: 1; text-shadow: 0 0 25px #fef08a, 0 0 40px #fde047; } 100% { top: -100px; opacity: 0; text-shadow: 0 0 25px #fef08a, 0 0 40px #fde047; } }
@keyframes dropAndFade { 0% { top: -100px; opacity: 0; text-shadow: 0 0 25px #fef08a, 0 0 40px #fde047; } 40% { top: 100px; opacity: 1; text-shadow: 0 0 25px #fef08a, 0 0 40px #fde047; } 50% { top: 100px; opacity: 1; text-shadow: none; } 100% { top: -100px; opacity: 0; text-shadow: none; } }

/* =================================== */
/* LAYOUTS DAS TELAS */
/* =================================== */
.main-container { display: flex; width: 100%; padding-top: 3.5rem; height: 100vh; transition: margin-left 0.4s ease-in-out; }
.main-container.content-shifted { margin-left: var(--sidebar-width); }
.login-page-container { display: flex; justify-content: center; align-items: center; width: 100vw; height: 100vh; padding-top: 3.5rem; }

/* =================================== */
/* ESTILOS DA HOME (SIDEBAR, CONTENT, ETC) */
/* =================================== */
.sidebar { position: fixed; left: 0; top: 3.5rem; height: calc(100vh - 3.5rem); width: var(--sidebar-width); background-color: var(--bg-primary); display: flex; flex-direction: column; padding: 20px 0; box-shadow: 2px 0 8px var(--shadow-color); transform: translateX(-100%); transition: transform 0.4s ease-in-out; z-index: 90; }
.sidebar.sidebar-visible, .sidebar.sidebar-pinned { transform: translateX(0); }
.sidebar .logo { display: flex; align-items: center; gap: 10px; font-size: 1.5em; font-weight: bold; margin-bottom: 30px; padding: 0 20px; color: var(--accent-primary); }
.sidebar-logo-img { width: 32px; height: 32px; object-fit: contain; }
.menu { list-style: none; display: flex; flex-direction: column; gap: 10px; padding: 0; margin: 0; }
.menu li a { color: var(--text-tertiary); text-decoration: none; transition: all 0.2s ease-in-out; padding: 14px 20px; display: block; }
.menu li a:hover { background-color: var(--bg-quaternary); color: var(--text-primary); }
.content { flex: 1; padding: 40px; width: 100%; overflow-y: auto; }
.content h1 { font-size: 2.5em; margin-bottom: 15px; color: var(--accent-tertiary); }
.content p { font-size: 1.2em; color: var(--text-secondary); }

/* =================================== */
/* NOVO ESTILO DOS CHAMADOS            */
/* =================================== */
.chamado { background-color: var(--bg-primary); border-radius: 8px; margin-bottom: 12px; box-shadow: 0 2px 10px var(--shadow-color); transition: background 0.3s ease; overflow: hidden; }
.chamado-header { display: flex; align-items: center; justify-content: space-between; padding: 12px 18px; cursor: pointer; border-left: 4px solid var(--accent-primary); gap: 16px; }
.chamado-header:hover { background-color: var(--bg-tertiary); }
.chamado-info { display: flex; align-items: center; gap: 16px; flex-wrap: nowrap; flex-grow: 1; overflow: hidden; }
.chamado-codigo { font-size: 1em; font-weight: bold; color: var(--text-primary); white-space: nowrap; flex-shrink: 0; display: flex; align-items: center; gap: 8px; }
.chamado-alerta { animation-duration: 1.5s; animation-iteration-count: infinite; animation-timing-function: ease-in-out; }
.chamado-alerta.alert-gray { animation-name: pulse-gray; }
.chamado-alerta.alert-blue { animation-name: pulse-blue; }
@keyframes pulse-gray { 0%, 100% { color: #9ca3af; text-shadow: 0 0 5px #9ca3af44; } 50% { color: #e5e7eb; text-shadow: 0 0 15px #e5e7ebaa; } }
@keyframes pulse-blue { 0%, 100% { color: #60a5fa; text-shadow: 0 0 5px #60a5fa44; } 50% { color: #dbeafe; text-shadow: 0 0 15px #dbeafeaa; } }
.chamado-resumo { color: var(--text-secondary); white-space: nowrap; overflow: hidden; text-overflow: ellipsis; flex-shrink: 1; min-width: 50px; }
.chamado-info-dates { font-size: 0.85em; color: var(--text-secondary); display: flex; gap: 12px; white-space: nowrap; margin-left: auto; flex-shrink: 0; }
.chamado-actions { display: flex; align-items: center; gap: 8px; flex-shrink: 0; }
.chamado-actions .botao-mostrar { background-color: var(--accent-secondary); color: white; border: none; padding: 6px 14px; border-radius: 5px; font-weight: 600; transition: background-color 0.2s ease; }
.chamado-actions .botao-mostrar:hover { background-color: var(--accent-hover); }
.botao-apagar { background: none; border: none; font-size: 1.2rem; cursor: pointer; color: var(--text-secondary); transition: color 0.2s, transform 0.2s; }
.botao-apagar:hover { color: var(--danger-color); transform: scale(1.2); }
.botao-finalizar { background: none; border: none; font-size: 1.2rem; cursor: pointer; color: var(--text-secondary); transition: color 0.2s, transform 0.2s; }
.botao-finalizar:hover { color: var(--success-color); transform: scale(1.2); }
.botao-editar { background: none; border: none; font-size: 1.1rem; cursor: pointer; color: var(--text-secondary); transition: color 0.2s, transform 0.2s; padding: 0 4px; }
.botao-editar:hover { color: var(--accent-primary); transform: scale(1.2); }
.chamado-detalhes { display: none; padding: 20px; background-color: var(--bg-tertiary); border-top: 1px solid var(--bg-quaternary); }
.conversa-container { max-height: 350px; overflow-y: auto; border: 1px solid var(--bg-quaternary); padding: 14px 8px; border-radius: 10px; display: flex; flex-direction: column; gap: 10px; background: var(--bg-secondary); margin-bottom: 20px; }
.mensagem { padding: 10px 14px; border-radius: 16px; max-width: 72%; min-width: 90px; white-space: pre-wrap; font-size: 1.03em; box-shadow: 0 1px 2px rgba(0,0,0,0.16); position: relative; display: flex; flex-direction: column; }
.mensagem.suporte { background: var(--accent-secondary); color:#fff; align-self: flex-end; }
.mensagem.cliente { background: var(--bg-quaternary); color: var(--text-primary); align-self: flex-start; }
.mensagem-header { display:flex; justify-content:space-between; font-size:12px; font-weight:600; margin-bottom:4px; user-select:none; }
.mensagem-header span:last-child { opacity: .75; }
.detalhes-suporte-container { margin-top: 13px; padding: 18px 12px 12px 16px; border-radius: 8px; background: var(--bg-secondary); color: var(--text-primary); box-shadow: 0 2px 12px rgba(0,0,0,0.2); }
.detalhes-grid { display: grid; grid-template-columns: 120px 1fr; gap: 10px 14px; align-items: center; }
.detalhes-grid span { color: var(--accent-primary); font-weight: 500; opacity: 0.9; text-align: right; }
.detalhes-grid input, .detalhes-grid textarea, .detalhes-grid select { background: var(--bg-primary); color: var(--text-primary); border: 1px solid var(--bg-quaternary); border-radius: 5px; padding: 8px 10px; width: 100%; font-family: inherit; font-size: 1rem; }
.detalhes-grid input[readonly], .detalhes-grid textarea[readonly] { background: var(--bg-tertiary); color: var(--text-secondary); cursor: not-allowed; }
.detalhes-grid textarea { resize: vertical; }
.suporte-field-container { display: flex; align-items: center; gap: 8px; }
#assign-to-me-btn { background: none; border: 1px solid var(--bg-quaternary); color: var(--text-primary); font-size: 1.2rem; cursor: pointer; padding: 4px 8px; border-radius: 5px; line-height: 1; transition: background-color 0.2s, border-color 0.2s; }
#assign-to-me-btn:hover { background-color: var(--bg-tertiary); border-color: var(--accent-primary); }

/* =================================== */
/* ESTILOS DO LOGIN (CAIXA, FORM, ETC) */
/* =================================== */
.login-box { position: relative; background-color: var(--bg-primary); color: var(--text-primary); padding: 2rem; border-radius: 10px; width: 320px; max-width: 90vw; box-shadow: 0 4px 12px var(--shadow-color); z-index: 101; transition: background-color 0.5s ease, color 0.5s ease; }
.titlelogin { text-align: center; margin-bottom: 1rem; font-size: 1.5rem; color: var(--accent-tertiary); }
.login-box form { display: flex; flex-direction: column; }
.login-box input, .login-box button { width: 100%; padding: 0.75rem; margin: 0.5rem 0; border: none; border-radius: 5px; font-size: 1rem; }
.login-box input { background-color: var(--bg-tertiary); color: var(--text-primary); transition: background-color 0.5s ease; }
.login-box input::placeholder { color: var(--text-secondary); }
.login-box input:focus { outline: 2px solid var(--accent-secondary); background-color: var(--bg-quaternary); color: var(--text-primary); }
.login-box button { background-color: var(--accent-secondary); color: #fff; cursor: pointer; font-weight: 600; transition: background-color 0.2s ease-in-out; }
.login-box button:hover { background-color: var(--accent-hover); }
.error { color: var(--error-color); font-size: 0.9rem; text-align: center; margin-bottom: 0.5rem; }

/* Anima√ß√µes de Fade/Zoom */
@keyframes fadeIn { from { opacity: 0; transform: translateY(10px); } to { opacity: 1; transform: translateY(0); } }
@keyframes slideIn { from { transform: translateX(-100%); } to { transform: translateX(0); } }
.fade-zoom-in { animation: fadeZoomIn 0.5s ease forwards; }
.fade-zoom-out { animation: fadeZoomOut 0.4s ease forwards; }
.fade-slide-down { animation: fadeSlideDown 0.6s ease forwards; }
@keyframes fadeZoomIn { 0% { opacity: 0; transform: scale(0.9); } 100% { opacity: 1; transform: scale(1); } }
@keyframes fadeZoomOut { 0% { opacity: 1; transform: scale(1); } 100% { opacity: 0; transform: scale(0.9); } }
@keyframes fadeSlideDown { 0% { opacity: 0; transform: translateY(-20px); } 100% { opacity: 1; transform: translateY(0); } }

models.py

from django.db import models

class WhatsappSlot(models.Model):
    conversation_key = models.CharField(max_length=100)
    contact_name = models.CharField(max_length=150, blank=True, null=True)
    text = models.TextField()
    username = models.CharField(max_length=100)
    duration = models.IntegerField(default=0)

    suporte = models.CharField(max_length=100, blank=True, null=True)
    cliente = models.CharField(max_length=100, blank=True, null=True)
    resumo = models.CharField(max_length=200, blank=True, null=True)
    problema = models.TextField(blank=True, null=True)
    indicador = models.CharField(max_length=100, blank=True, null=True)
    tempo_solucao = models.CharField(max_length=100, blank=True, null=True)
    solucao = models.TextField(blank=True, null=True) # <-- ADICIONADO
    setor = models.CharField(max_length=100, blank=True, null=True) # <-- ADICIONADO

    chamadofinalizado = models.BooleanField(default=False)
    codigo_chamado = models.CharField(max_length=100, blank=True, null=True)

    criado_em = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"{self.conversation_key} - {self.criado_em.strftime('%d/%m %H:%M')}"

views.py

from django.shortcuts import render, redirect
from django.contrib.auth import authenticate, login, logout
from django.contrib.auth.decorators import login_required
from django.utils.decorators import method_decorator
from django.views.decorators.csrf import csrf_exempt
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework.permissions import AllowAny, IsAuthenticated
from rest_framework import status
from rest_framework.generics import ListAPIView, RetrieveUpdateAPIView
from rest_framework.decorators import api_view, permission_classes, authentication_classes
from rest_framework.authentication import SessionAuthentication
from django.db.models import Max, Q, IntegerField
from django.db.models.functions import Cast
from .models import WhatsappSlot
from .serializers import WhatsappSlotSerializer
from django.contrib.auth.models import User
from django.utils import timezone

def format_timespan(td):
    days = td.days
    hours, remainder = divmod(td.seconds, 3600)
    minutes, _ = divmod(remainder, 60)
    parts = []
    if days > 0:
        parts.append(f"{days} dia{'s' if days > 1 else ''}")
    if hours > 0:
        parts.append(f"{hours} hora{'s' if hours > 1 else ''}")
    if minutes > 0:
        parts.append(f"{minutes} minuto{'s' if minutes > 1 else ''}")
    return ", ".join(parts) if parts else "Menos de um minuto"

@api_view(['GET'])
@authentication_classes([SessionAuthentication])
@permission_classes([IsAuthenticated])
def get_dashboard_stats(request):
    total_abertos = WhatsappSlot.objects.filter(chamadofinalizado=False).values('codigo_chamado').distinct().count()
    total_finalizados = WhatsappSlot.objects.filter(chamadofinalizado=True).values('codigo_chamado').distinct().count()
    abertos_sem_atribuicao = WhatsappSlot.objects.filter(chamadofinalizado=False, suporte__isnull=True).values('codigo_chamado').distinct().count()
    finalizados_sem_atribuicao = WhatsappSlot.objects.filter(chamadofinalizado=True, suporte__isnull=True).values('codigo_chamado').distinct().count()
    atrasados = 0 
    data = {
        'total_abertos': total_abertos,
        'total_finalizados': total_finalizados,
        'abertos_sem_atribuicao': abertos_sem_atribuicao,
        'finalizados_sem_atribuicao': finalizados_sem_atribuicao,
        'atrasados': atrasados,
    }
    return Response(data, status=status.HTTP_200_OK)

@api_view(['GET'])
@authentication_classes([SessionAuthentication])
@permission_classes([IsAuthenticated])
def get_all_users(request):
    users = User.objects.all().order_by('username').values_list('username', flat=True)
    return Response(list(users), status=status.HTTP_200_OK)

@api_view(['GET'])
@authentication_classes([SessionAuthentication])
@permission_classes([IsAuthenticated])
def get_user_stats(request):
    user = request.user
    finalizados_count = WhatsappSlot.objects.filter(
        chamadofinalizado=True, 
        codigo_chamado__isnull=False,
        suporte=user.username
    ).values('codigo_chamado').distinct().count()
    data = {
        "username": user.username,
        "email": user.email,
        "full_name": user.get_full_name(),
        "date_joined": user.date_joined,
        "finalizados_count": finalizados_count,
    }
    return Response(data, status=status.HTTP_200_OK)

@api_view(['PATCH'])
@authentication_classes([SessionAuthentication])
@permission_classes([IsAuthenticated])
def atualizar_chamado(request, codigo):
    if not codigo:
        return Response({"detail": "C√≥digo do chamado n√£o fornecido."}, status=status.HTTP_400_BAD_REQUEST)
    
    slots_do_chamado = WhatsappSlot.objects.filter(codigo_chamado=codigo)
    if not slots_do_chamado.exists():
        return Response({"detail": f"Nenhum registro encontrado para o chamado #{codigo}."}, status=status.HTTP_404_NOT_FOUND)

    # --- IN√çCIO DA CORRE√á√ÉO ---
    # A l√≥gica foi alterada para atualizar SOMENTE o √∫ltimo registro (slot) do chamado.
    # O m√©todo .update() em massa foi substitu√≠do por .save() em um √∫nico objeto.
    
    # 1. Isolar o √∫ltimo registro, que cont√©m os metadados do chamado.
    ultimo_slot = slots_do_chamado.order_by('-criado_em').first()
    if not ultimo_slot:
        return Response({"detail": "N√£o foi poss√≠vel encontrar o registro principal do chamado."}, status=status.HTTP_404_NOT_FOUND)

    update_data = request.data
    # 2. Proteger campos que n√£o devem ser editados manualmente.
    update_data.pop('cliente', None)
    update_data.pop('tempo_solucao', None)
    
    # 3. Aplicar as altera√ß√µes ao objeto do √∫ltimo slot e salv√°-lo.
    for key, value in update_data.items():
        setattr(ultimo_slot, key, value)
    
    ultimo_slot.save()
    
    serializer = WhatsappSlotSerializer(ultimo_slot)
    return Response(serializer.data, status=status.HTTP_200_OK)
    # --- FIM DA CORRE√á√ÉO ---

@api_view(['POST'])
@authentication_classes([SessionAuthentication])
@permission_classes([IsAuthenticated])
def finalizar_chamado(request, codigo):
    slots = WhatsappSlot.objects.filter(codigo_chamado=codigo)
    if not slots.exists():
        return Response({"detail": f"Nenhum registro encontrado para o chamado #{codigo}."}, status=status.HTTP_404_NOT_FOUND)
    primeiro_slot = slots.order_by('criado_em').first()
    if not primeiro_slot:
        return Response({"detail": "N√£o foi poss√≠vel encontrar o in√≠cio do chamado."}, status=status.HTTP_400_BAD_REQUEST)
    data_abertura = primeiro_slot.criado_em
    data_finalizacao = timezone.now()
    duracao = data_finalizacao - data_abertura
    tempo_solucao_str = format_timespan(duracao)
    
    # Esta atualiza√ß√£o em massa est√° correta para esta a√ß√£o,
    # pois todos os registros do chamado devem ser marcados como finalizados.
    slots.update(
        chamadofinalizado=True,
        tempo_solucao=tempo_solucao_str
    )
    return Response({"detail": "Chamado finalizado com sucesso."}, status=status.HTTP_200_OK)

@api_view(['DELETE'])
@authentication_classes([SessionAuthentication])
@permission_classes([IsAuthenticated])
def apagar_chamado_por_codigo(request, codigo):
    if not codigo:
        return Response({"detail": "C√≥digo do chamado n√£o fornecido."}, status=status.HTTP_400_BAD_REQUEST)
    count, _ = WhatsappSlot.objects.filter(codigo_chamado=codigo).delete()
    if count > 0:
        return Response({"detail": f"{count} registros do chamado #{codigo} foram apagados."}, status=status.HTTP_200_OK)
    else:
        return Response({"detail": f"Nenhum registro encontrado para o chamado #{codigo}."}, status=status.HTTP_404_NOT_FOUND)

def main_view(request):
    if request.method == 'POST':
        username = request.POST.get('username')
        password = request.POST.get('password')
        user = authenticate(request, username=username, password=password)
        if user is not None:
            login(request, user)
            return redirect('main')
        else:
            return render(request, 'main.html', {'error': 'Usu√°rio ou senha inv√°lidos.'})
    return render(request, 'main.html')

@login_required(login_url='main')
def logout_view(request):
    logout(request)
    return redirect('main')

@api_view(['GET'])
@permission_classes([AllowAny])
@authentication_classes([])
def get_next_codigo(request):
    max_codigo_obj = WhatsappSlot.objects.annotate(
        codigo_as_int=Cast('codigo_chamado', output_field=IntegerField())
    ).aggregate(max_codigo=Max('codigo_as_int'))
    max_num = max_codigo_obj['max_codigo'] or 0
    novo_codigo = str(max_num + 1)
    return Response({"codigo": novo_codigo})

@api_view(['DELETE'])
@permission_classes([AllowAny])
@authentication_classes([])
def clean_chamado_by_key(request, key):
    count, _ = WhatsappSlot.objects.filter(
        conversation_key=key,
        chamadofinalizado=False
    ).delete()
    return Response({"detail": f"{count} mensagens descartadas"}, status=status.HTTP_200_OK)

@method_decorator(csrf_exempt, name='dispatch')
class WhatsappSlotCreateOrUpdateAPIView(APIView):
    authentication_classes = []
    permission_classes = [AllowAny]
    def get(self, request):
        qs_filter = Q()
        conversation_key = request.query_params.get('conversation_key')
        finalizado = request.query_params.get('finalizado')
        if conversation_key:
            qs_filter &= Q(conversation_key=conversation_key)
        if finalizado is not None:
            is_finalizado = finalizado.lower() in ['1', 'true', 'sim', 'yes']
            qs_filter &= Q(chamadofinalizado=is_finalizado)
            if not is_finalizado and 'conversation_key' in request.query_params:
                 qs_filter &= Q(codigo_chamado__isnull=True)
        slots = WhatsappSlot.objects.filter(qs_filter).order_by('criado_em')
        serializer = WhatsappSlotSerializer(slots, many=True)
        return Response(serializer.data)

    def post(self, request):
        data = request.data.copy()
        if 'contact_name' in data:
            data['cliente'] = data['contact_name']
        serializer = WhatsappSlotSerializer(data=data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data, status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

    def patch(self, request, pk=None):
        if not pk:
            return Response({"detail": "ID do slot √© obrigat√≥rio"}, status=status.HTTP_400_BAD_REQUEST)
        try:
            slot = WhatsappSlot.objects.get(pk=pk)
            serializer = WhatsappSlotSerializer(slot, data=request.data, partial=True)
            if serializer.is_valid():
                serializer.save()
                return Response(serializer.data)
            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
        except WhatsappSlot.DoesNotExist:
            return Response({"detail": "Slot n√£o encontrado"}, status=status.HTTP_404_NOT_FOUND)

class WhatsappSlotListAPIView(ListAPIView):
    serializer_class = WhatsappSlotSerializer
    authentication_classes = [SessionAuthentication]
    permission_classes = [IsAuthenticated]
    def get_queryset(self):
        qs = WhatsappSlot.objects.all().order_by('criado_em')
        finalizado = self.request.query_params.get('finalizado')
        if finalizado is not None:
            is_finalizado = finalizado.lower() in ['1', 'true', 'sim', 'yes']
            qs = qs.filter(chamadofinalizado=is_finalizado, codigo_chamado__isnull=False)
        return qs

class WhatsappSlotUpdateAPIView(RetrieveUpdateAPIView):
    queryset = WhatsappSlot.objects.all()
    serializer_class = WhatsappSlotSerializer
    authentication_classes = [SessionAuthentication]
    permission_classes = [IsAuthenticated]

serializers.py

from rest_framework import serializers
from .models import WhatsappSlot

class WhatsappSlotSerializer(serializers.ModelSerializer):
    class Meta:
        model = WhatsappSlot
        fields = '__all__'

    def validate_conversation_key(self, value):
        if not value:
            raise serializers.ValidationError("conversation_key √© obrigat√≥rio.")
        return value

urls.py

from django.urls import path
from . import views
from django.views.generic.base import RedirectView

urlpatterns = [
    # Redireciona a raiz do site para /NocSys/
    path('', RedirectView.as_view(pattern_name='main', permanent=False)),

    # APIs do Frontend para gerenciamento de chamados e usu√°rio
    path('api/dashboard/stats/', views.get_dashboard_stats, name='get_dashboard_stats'),
    path('api/user/stats/', views.get_user_stats, name='get_user_stats'),
    path('api/users/', views.get_all_users, name='get_all_users'),
    path('api/chamado/apagar/<str:codigo>/', views.apagar_chamado_por_codigo, name='apagar_chamado_por_codigo'),
    path('api/chamado/atualizar/<str:codigo>/', views.atualizar_chamado, name='atualizar_chamado'),
    path('api/chamado/finalizar/<str:codigo>/', views.finalizar_chamado, name='finalizar_chamado'),
    
    # URL principal da aplica√ß√£o
    path('NocSys/', views.main_view, name='main'),
    
    # URL de Logout
    path('logout/', views.logout_view, name='logout'),

    # APIs para o bot
    path('api/whatsapp-note/', views.WhatsappSlotCreateOrUpdateAPIView.as_view(), name='api-whatsapp-note'),
    path('api/whatsapp-note/<int:pk>/', views.WhatsappSlotCreateOrUpdateAPIView.as_view(), name='api-whatsapp-note-detail'),
    path('api/whatsapp-note/clean-by-key/<path:key>/', views.clean_chamado_by_key, name='api-whatsapp-note-clean-by-key'),
    path('api/get-next-codigo/', views.get_next_codigo, name='api-get-next-codigo'),

    # APIs para o front
    path('api/whatsapp-slots/', views.WhatsappSlotListAPIView.as_view(), name='api-whatsapp-slot-list'),
    path('api/whatsapp-slots/<int:pk>/', views.WhatsappSlotUpdateAPIView.as_view(), name='api-whatsapp-slot-edit'),
]

chamados_finalizados.js

// chamados_finalizados.js
function escapeHtml(text) {
  return text ? text.replace(/[&<>"']/g, m => ({ '&': '&amp;', '<': '&lt;', '>': '&gt;', '"': '&quot;', "'": '&#039;' })[m]) : '';
}

function niceDate(dateStr) {
  if (!dateStr) return '';
  const dt = new Date(dateStr);
  const dtDate = dt.toLocaleDateString('pt-BR');
  const dtTime = dt.toLocaleTimeString('pt-BR', { hour: '2-digit', minute: '2-digit' });
  return `${dtTime} ${dtDate}`;
}

async function loadChamadosFinalizados() {
  const content = document.getElementById('content-area');
  content.innerHTML = `
    <h1>Chamados Finalizados</h1>
    <p>Carregando...</p>
  `;

  try {
    const res = await fetch('/api/whatsapp-slots/?finalizado=1');
    if (!res.ok) throw new Error('Erro ao buscar chamados finalizados');
    const chamados = await res.json();

    let headerHtml = `
      <div style="display: flex; align-items: center; justify-content: space-between; margin-bottom: 20px;">
        <h1>Chamados Finalizados</h1>
        <button id="btnRecarregarChamadosFinalizados" title="Recarregar chamados" class="menu-toggle-btn" style="background: none; border: none; font-size: 24px; cursor: pointer; color: var(--accent-primary);">üîÑ</button>
      </div>
    `;

    if (chamados.length === 0) {
      content.innerHTML = `${headerHtml}<p>Nenhum chamado finalizado encontrado.</p>`;
      if (document.getElementById('btnRecarregarChamadosFinalizados')) {
          document.getElementById('btnRecarregarChamadosFinalizados').onclick = loadChamadosFinalizados;
      }
      return;
    }

    const agrupado = {};
    chamados.forEach(c => {
      if (!c.codigo_chamado) return;
      const cod = c.codigo_chamado;
      if (!agrupado[cod]) agrupado[cod] = [];
      agrupado[cod].push(c);
    });

    const idsOrdenados = Object.keys(agrupado).sort((a, b) => (parseInt(b) || 0) - (parseInt(a) || 0));

    let chamadosHtml = '<div style="display:flex;flex-direction:column;gap:12px;">';

    for (const codigo of idsOrdenados) {
      const slots = agrupado[codigo].sort((a,b) => new Date(a.criado_em) - new Date(b.criado_em));
      const primeiro = slots[0];
      const ultimo = slots[slots.length - 1];
      const aberto = primeiro.criado_em || '';
      const encerrado = ultimo.criado_em || '';
      const resumo = ultimo.resumo || '';
      const semSuporte = !ultimo.suporte;

      const alertaHtml = semSuporte 
        ? '<span class="chamado-alerta alert-blue" title="Chamado sem atribui√ß√£o">‚ùó</span>'
        : '';

      chamadosHtml += `
        <div class="chamado" id="chamado-${escapeHtml(codigo)}">
          <div class="chamado-header" onclick="toggleFinalizadoDetalhes(this.parentNode)">
            <div class="chamado-info">
              <strong class="chamado-codigo">${alertaHtml}#${escapeHtml(codigo)}</strong>
              <span class="chamado-resumo" title="${escapeHtml(resumo)}">${escapeHtml(resumo)}</span>
              <div class="chamado-info-dates">
                <span>Aberto: ${niceDate(aberto)}</span>
                <span>Encerrado: ${niceDate(encerrado)}</span>
              </div>
            </div>
            <div class="chamado-actions">
                <button class="botao-mostrar">Mostrar</button>
                <button class="botao-editar" title="Editar Chamado" onclick="event.stopPropagation(); showEditModal('${escapeHtml(codigo)}')">‚úèÔ∏è</button>
                <button class="botao-apagar" title="Apagar Chamado" onclick="event.stopPropagation(); apagarChamado('${escapeHtml(codigo)}')">üóëÔ∏è</button>
            </div>
          </div>
          <div class="chamado-detalhes" data-codigo="${codigo}"></div>
        </div>
      `;
    }
    chamadosHtml += `</div>`;
    content.innerHTML = headerHtml + chamadosHtml;
    document.getElementById('btnRecarregarChamadosFinalizados').onclick = loadChamadosFinalizados;

  } catch (err) {
    content.innerHTML = `<p style="color:red;">${err.message}</p>`;
    console.error(err);
  }
}

async function toggleFinalizadoDetalhes(chamadoElement) {
  const detalhes = chamadoElement.querySelector('.chamado-detalhes');
  const btn = chamadoElement.querySelector('.botao-mostrar');

  if (detalhes.style.display === 'block') {
    detalhes.style.display = 'none';
    btn.innerText = 'Mostrar';
    detalhes.innerHTML = '';
    return;
  }

  btn.innerText = '...';
  detalhes.style.display = 'block';
  detalhes.innerHTML = '<p>Carregando detalhes...</p>';
  
  const codigo = detalhes.getAttribute('data-codigo');

  try {
    const res = await fetch(`/api/whatsapp-slots/?finalizado=1`);
    if (!res.ok) throw new Error('Erro ao buscar detalhes do chamado finalizado');
    let msgs = (await res.json()).filter(s => `${s.codigo_chamado}` === codigo);
    msgs.sort((a,b) => new Date(a.criado_em) - new Date(b.criado_em));

    let convo = `<div class="conversa-container">`;
    msgs.forEach(m => {
      const data = new Date(m.criado_em);
      const dataStr = data.toLocaleTimeString('pt-BR', { hour: '2-digit', minute: '2-digit' });
      const isSuporte = m.username === '5514997642104@c.us';
      const nomeExibido = isSuporte ? 'Suporte' : (m.cliente || m.contact_name || 'Cliente');
      convo += `
        <div class="mensagem ${isSuporte ? 'suporte' : 'cliente'}">
            <div class="mensagem-header">
              <span>${escapeHtml(nomeExibido)}</span>
              <span>${dataStr}</span>
            </div>
            <div>${escapeHtml(m.text)}</div>
        </div>
      `;
    });
    convo += `</div>`;

    const ultimo = msgs[msgs.length - 1] || {};
    convo += `
      <div class="detalhes-suporte-container">
        <h3>Detalhes do Suporte</h3>
        <div class="detalhes-grid">
          <span>Suporte:</span> <input readonly value="${escapeHtml(ultimo.suporte || 'N/A')}" />
          <span>Cliente:</span> <input readonly value="${escapeHtml(ultimo.cliente || 'N/A')}" />
          <span>Setor:</span> <input readonly value="${escapeHtml(ultimo.setor || 'N/A')}" />
          <span>Resumo:</span> <input readonly value="${escapeHtml(ultimo.resumo || 'N/A')}" />
          <span>Problema:</span> <textarea readonly rows="2">${escapeHtml(ultimo.problema || 'N/A')}</textarea>
          <span>Solu√ß√£o:</span> <textarea readonly rows="2">${escapeHtml(ultimo.solucao || 'N/A')}</textarea>
          <span>Indicador:</span> <input readonly value="${escapeHtml(ultimo.indicador || 'N/A')}" />
          <span>Tempo Solu√ß√£o:</span> <input readonly value="${escapeHtml(ultimo.tempo_solucao || 'N/A')}" />
        </div>
      </div>
    `;

    detalhes.innerHTML = convo;
    btn.innerText = 'Esconder';

  } catch (err) {
    detalhes.innerHTML = `<p style="color:red;">${err.message}</p>`;
    btn.innerText = 'Tentar Novamente';
    console.error(err);
  }
}

abertos.js

// abertos.js
function escapeHtml(text) {
  return text ? text.replace(/[&<>"']/g, m => ({ '&': '&amp;', '<': '&lt;', '>': '&gt;', '"': '&quot;', "'": '&#039;' })[m]) : '';
}

function niceDate(dateStr) {
  if (!dateStr) return '';
  const dt = new Date(dateStr);
  const dtDate = dt.toLocaleDateString('pt-BR');
  const dtTime = dt.toLocaleTimeString('pt-BR', { hour: '2-digit', minute: '2-digit' });
  return `${dtTime} ${dtDate}`;
}

async function loadAbertos() {
  const content = document.getElementById('content-area');
  content.innerHTML = `
    <h1>Chamados em Aberto</h1>
    <p>Carregando...</p>
  `;

  try {
    const res = await fetch('/api/whatsapp-slots/?finalizado=0');
    if (!res.ok) throw new Error('Erro ao buscar chamados em aberto');
    const chamados = await res.json();

    let headerHtml = `
      <div style="display: flex; align-items: center; justify-content: space-between; margin-bottom: 20px;">
        <h1>Chamados em Aberto</h1>
        <button id="btnRecarregarChamadosAbertos" title="Recarregar chamados" class="menu-toggle-btn" style="background: none; border: none; font-size: 24px; cursor: pointer; color: var(--accent-primary);">üîÑ</button>
      </div>
    `;

    if (chamados.length === 0) {
      content.innerHTML = `${headerHtml}<p>Nenhum chamado em aberto.</p>`;
      if(document.getElementById('btnRecarregarChamadosAbertos')) {
        document.getElementById('btnRecarregarChamadosAbertos').onclick = loadAbertos;
      }
      return;
    }

    const agrupado = {};
    chamados.forEach(c => {
      if (!c.codigo_chamado) return;
      const cod = c.codigo_chamado;
      if (!agrupado[cod]) agrupado[cod] = [];
      agrupado[cod].push(c);
    });

    const idsOrdenados = Object.keys(agrupado).sort((a, b) => (parseInt(a) || 0) - (parseInt(b) || 0));

    let chamadosHtml = '<div style="display:flex;flex-direction:column;gap:12px;">';

    for (const codigo of idsOrdenados) {
      const slots = agrupado[codigo].sort((a,b) => new Date(a.criado_em) - new Date(b.criado_em));
      const primeiro = slots[0];
      const ultimo = slots[slots.length - 1];
      const aberto = primeiro.criado_em || '';
      const resumo = ultimo.resumo || '';
      const semSuporte = !ultimo.suporte;

      const alertaHtml = semSuporte 
        ? '<span class="chamado-alerta alert-gray" title="Chamado sem atribui√ß√£o">‚ùó</span>' 
        : '';

      chamadosHtml += `
        <div class="chamado" id="chamado-${escapeHtml(codigo)}">
          <div class="chamado-header" onclick="toggleAbertoDetalhes(this.parentNode)">
            <div class="chamado-info">
              <strong class="chamado-codigo">${alertaHtml}#${escapeHtml(codigo)}</strong>
              <span class="chamado-resumo" title="${escapeHtml(resumo)}">${escapeHtml(resumo)}</span>
              <div class="chamado-info-dates">
                <span>Aberto: ${niceDate(aberto)}</span>
              </div>
            </div>
            <div class="chamado-actions">
                <button class="botao-mostrar">Mostrar</button>
                <button class="botao-finalizar" title="Finalizar Chamado" onclick="event.stopPropagation(); finalizarChamado('${escapeHtml(codigo)}')">‚úîÔ∏è</button>
                <button class="botao-editar" title="Editar Chamado" onclick="event.stopPropagation(); showEditModal('${escapeHtml(codigo)}')">‚úèÔ∏è</button>
                <button class="botao-apagar" title="Apagar Chamado" onclick="event.stopPropagation(); apagarChamado('${escapeHtml(codigo)}')">üóëÔ∏è</button>
            </div>
          </div>
          <div class="chamado-detalhes" data-codigo="${codigo}"></div>
        </div>
      `;
    }
    chamadosHtml += `</div>`;
    content.innerHTML = headerHtml + chamadosHtml;
    document.getElementById('btnRecarregarChamadosAbertos').onclick = loadAbertos;

  } catch (err) {
    content.innerHTML = `<p style="color:red;">${err.message}</p>`;
    console.error(err);
  }
}

async function toggleAbertoDetalhes(chamadoElement) {
  const detalhes = chamadoElement.querySelector('.chamado-detalhes');
  const btn = chamadoElement.querySelector('.botao-mostrar');

  if (detalhes.style.display === 'block') {
    detalhes.style.display = 'none';
    btn.innerText = 'Mostrar';
    detalhes.innerHTML = '';
    return;
  }

  btn.innerText = '...';
  detalhes.style.display = 'block'; 
  detalhes.innerHTML = '<p>Carregando detalhes...</p>';
  
  const codigo = detalhes.getAttribute('data-codigo');

  try {
    const res = await fetch(`/api/whatsapp-slots/?finalizado=0`);
    if (!res.ok) throw new Error('Erro ao buscar detalhes do chamado em aberto');
    let msgs = (await res.json()).filter(s => `${s.codigo_chamado}` === codigo);
    msgs.sort((a,b) => new Date(a.criado_em) - new Date(b.criado_em));

    let convo = `<div class="conversa-container">`;
    msgs.forEach(m => {
      const data = new Date(m.criado_em);
      const dataStr = data.toLocaleTimeString('pt-BR', { hour: '2-digit', minute: '2-digit' });
      const isSuporte = m.username === '5514997642104@c.us';
      const nomeExibido = isSuporte ? 'Suporte' : (m.cliente || m.contact_name || 'Cliente');
      convo += `
        <div class="mensagem ${isSuporte ? 'suporte' : 'cliente'}">
            <div class="mensagem-header">
              <span>${escapeHtml(nomeExibido)}</span>
              <span>${dataStr}</span>
            </div>
            <div>${escapeHtml(m.text)}</div>
        </div>
      `;
    });
    convo += `</div>`;

    detalhes.innerHTML = convo;
    btn.innerText = 'Esconder';

  } catch (err) {
    detalhes.innerHTML = `<p style="color:red;">${err.message}</p>`;
    btn.innerText = 'Tentar Novamente';
    console.error(err);
  }
}

dashboard.js

async function loadDashboard() {
    const contentArea = document.getElementById('content-area');
    contentArea.innerHTML = `
        <h1>Dashboard</h1>
        <p>Carregando estat√≠sticas...</p>
    `;

    try {
        const response = await fetch('/api/dashboard/stats/');
        if (!response.ok) {
            throw new Error(`Erro ao buscar dados do dashboard: ${response.statusText}`);
        }
        const stats = await response.json();

        contentArea.innerHTML = `
            <h1>Dashboard</h1>
            <div class="dashboard-grid">
                <div class="dashboard-card card-yellow" onclick="loadAbertos()">
                    <div class="card-number">${stats.total_abertos}</div>
                    <div class="card-title">Chamados em Aberto</div>
                </div>
                <div class="dashboard-card card-green" onclick="loadChamadosFinalizados()">
                    <div class="card-number">${stats.total_finalizados}</div>
                    <div class="card-title">Chamados Finalizados</div>
                </div>
                <div class="dashboard-card card-gray" onclick="loadAbertos()">
                    <div class="card-number">${stats.abertos_sem_atribuicao}</div>
                    <div class="card-title">Abertos (Sem Atribui√ß√£o)</div>
                </div>
                <div class="dashboard-card card-blue" onclick="loadChamadosFinalizados()">
                    <div class="card-number">${stats.finalizados_sem_atribuicao}</div>
                    <div class="card-title">Finalizados (Sem Atribui√ß√£o)</div>
                </div>
                <div class="dashboard-card card-red">
                    <div class="card-number">${stats.atrasados}</div>
                    <div class="card-title">Chamados Atrasados</div>
                    <div class="card-wip">(WIP)</div>
                </div>
            </div>
        `;

    } catch (error) {
        console.error("Erro ao carregar o dashboard:", error);
        contentArea.innerHTML = `
            <h1>Dashboard</h1>
            <p style="color: var(--danger-color);">N√£o foi poss√≠vel carregar as estat√≠sticas. Tente novamente mais tarde.</p>
        `;
    }
}

config.js

// config.js

async function showSettingsModal() {
    const backdrop = document.getElementById('settings-backdrop');
    if (!backdrop) return;
    
    const closeBtn = document.getElementById('settings-close-btn');
    const navLinks = document.querySelectorAll('.settings-nav-link');
    const contentContainer = backdrop.querySelector('.settings-container');

    // Mostra o modal e o backdrop
    backdrop.classList.remove('hidden');
    contentContainer.classList.remove('fade-in'); // Garante que a anima√ß√£o possa rodar de novo
    void contentContainer.offsetWidth; // For√ßa o reflow para reiniciar a anima√ß√£o
    contentContainer.classList.add('fade-in');


    // Fun√ß√£o para esconder o modal
    const hide = () => {
        backdrop.classList.add('hidden');
        // Limpa os event listeners para evitar duplica√ß√£o
        closeBtn.removeEventListener('click', hide);
        backdrop.removeEventListener('click', backdropClickHandler);
    };
    
    const backdropClickHandler = (e) => {
        if (e.target === backdrop) {
            hide();
        }
    };
    
    closeBtn.addEventListener('click', hide, { once: true });
    backdrop.addEventListener('click', backdropClickHandler, { once: true });

    // L√≥gica de navega√ß√£o interna do modal
    navLinks.forEach(link => {
        link.addEventListener('click', (e) => {
            e.preventDefault();

            // Remove a classe 'active' de todos os links
            navLinks.forEach(l => l.classList.remove('active'));
            // Esconde todas as views
            document.querySelectorAll('.settings-view').forEach(v => v.classList.add('hidden'));

            // Adiciona a classe 'active' ao link clicado e mostra a view correspondente
            link.classList.add('active');
            const targetId = link.getAttribute('data-target');
            const targetView = document.getElementById(targetId);
            if(targetView) {
                targetView.classList.remove('hidden');
            }
        });
    });

    // Busca e preenche os dados do usu√°rio na aba "Usu√°rio"
    const userViewLink = document.querySelector('.settings-nav-link[data-target="settings-view-user"]');
    if (userViewLink && userViewLink.classList.contains('active')) {
        try {
            const response = await fetch('/api/user/stats/');
            if (!response.ok) {
                throw new Error('N√£o foi poss√≠vel carregar os dados do usu√°rio.');
            }
            const data = await response.json();

            // Formata data
            const dateJoined = new Date(data.date_joined);
            const formattedDate = dateJoined.toLocaleDateString('pt-BR', {
                day: '2-digit',
                month: 'long',
                year: 'numeric'
            });

            // Preenche os campos
            document.getElementById('settings-user-name').textContent = data.full_name || data.username;
            document.getElementById('settings-user-email').textContent = data.email || 'N√£o informado';
            document.getElementById('settings-user-username').textContent = data.username;
            document.getElementById('settings-user-joined').textContent = formattedDate;
            document.getElementById('settings-finalizados-count').textContent = data.finalizados_count;

        } catch (error) {
            console.error('Erro ao buscar estat√≠sticas do usu√°rio:', error);
            document.getElementById('settings-user-name').textContent = 'Erro ao carregar';
            document.getElementById('settings-user-email').textContent = 'Erro ao carregar';
        }
    }
}

bot.js

const wppconnect = require('@wppconnect-team/wppconnect');
const axios = require('axios');

const OPERADOR = '5514997642104@c.us';
const conversationState = {};

function getBaseKey(u1, u2) {
    return [u1, u2].sort().join('|');
}

wppconnect.create({
    browserArgs: ['--no-sandbox'],
    executablePath: '/usr/bin/google-chrome',
    headless: false,
    autoClose: false,
})
.then(client => start(client))
.catch(console.error);

async function start(client) {
    console.log('‚úÖ Bot iniciado. Aguardando mensagens...');

    client.onAnyMessage(async (msg) => {
        try {
            if (!msg?.body) return;
            const { from, to, body } = msg;
            const texto = body.trim();

            let contato;
            if (from === OPERADOR && to?.endsWith('@c.us')) contato = to;
            else if (to === OPERADOR && from?.endsWith('@c.us')) contato = from;
            else return;

            // Inicia a grava√ß√£o
            if (from === OPERADOR && /^\/s$/i.test(texto)) {
                // 1. VERIFICA SE J√Å EXISTE UMA GRAVA√á√ÉO ATIVA PARA ESTE CONTATO
                if (conversationState[contato]) {
                    await client.sendText(from, '‚ö†Ô∏è J√° existe uma grava√ß√£o ativa para este contato. Finalize-a com /p ou /a antes de iniciar uma nova.');
                    return;
                }
                
                const key = `${getBaseKey(OPERADOR, contato)}#${Date.now()}`;
                conversationState[contato] = { key, slots: [] };
                await client.sendText(from, 'üü¢ Grava√ß√£o ativada.');
                // 2. MENSAGEM PARA O CLIENTE FOI REMOVIDA. S√ì O OPERADOR RECEBE A CONFIRMA√á√ÉO.
                return;
            }

            // Deixa o chamado em aberto
            if (from === OPERADOR && /^\/a$/i.test(texto)) {
                if (!conversationState[contato]) {
                    await client.sendText(from, '‚ö†Ô∏è Nenhuma grava√ß√£o ativa.');
                    return;
                }
                await finalizarChamado(client, contato, false);
                delete conversationState[contato];
                return;
            }

            // Finaliza o chamado
            if (from === OPERADOR && /^\/p$/i.test(texto)) {
                if (!conversationState[contato]) {
                    await client.sendText(from, '‚ö†Ô∏è Nenhuma grava√ß√£o ativa.');
                    return;
                }
                await finalizarChamado(client, contato, true);
                delete conversationState[contato];
                return;
            }

            // Descarta a grava√ß√£o
            if (from === OPERADOR && /^\/d$/i.test(texto)) {
                if (conversationState[contato]) {
                    const key = conversationState[contato].key;
                    await axios.delete(`http://localhost:8000/api/whatsapp-note/clean-by-key/${encodeURIComponent(key)}/`);
                    
                    delete conversationState[contato];
                    await client.sendText(OPERADOR, 'üóëÔ∏è Grava√ß√£o cancelada. As mensagens foram descartadas.');
                } else {
                    await client.sendText(OPERADOR, '‚ö†Ô∏è Nenhuma grava√ß√£o ativa para cancelar.');
                }
                return;
            }

            // Registra a mensagem se houver uma grava√ß√£o ativa
            if (conversationState[contato]) {
                const contactInfo = await client.getContact(contato);
                const contactDisplayName = contactInfo.name || contactInfo.pushname || contato;
                
                const key = conversationState[contato].key;
                const { data } = await axios.post('http://localhost:8000/api/whatsapp-note/', {
                    conversation_key: key,
                    text: texto,
                    username: from,
                    contact_name: contactDisplayName,
                });
                conversationState[contato].slots.push(data.id);
            }
        } catch (err) {
            console.error('‚ùå Erro: ', err.message);
            const errorMessage = err.response ? JSON.stringify(err.response.data) : err.message;
            client.sendText(OPERADOR, `‚ùå Erro no Bot: ${errorMessage}`);
        }
    });
}

async function finalizarChamado(client, contato, finalizado) {
    const key = conversationState[contato].key;
    const { data: slots } = await axios.get('http://localhost:8000/api/whatsapp-note/', {
        params: { conversation_key: key },
    });

    if (slots.length === 0) {
        await client.sendText(OPERADOR, '‚ö†Ô∏è Nenhuma mensagem para registrar. Finalizando sem salvar.');
        return;
    }

    const { data } = await axios.get('http://localhost:8000/api/get-next-codigo/');
    const codigo = data.codigo;

    for (const s of slots) {
        await axios.patch(`http://localhost:8000/api/whatsapp-note/${s.id}/`, {
            chamadofinalizado: finalizado,
            codigo_chamado: codigo
        });
    }

    const msg = finalizado ? `üî¥ Chamado finalizado. C√≥digo: #${codigo}` : `üü° Chamado em aberto. C√≥digo: #${codigo}`;
    await client.sendText(OPERADOR, msg);
}

